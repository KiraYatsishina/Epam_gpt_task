Create a RESTful API to manage a simple todo list application using Spring Boot,
Hibernate, and MySQL. The application should allow users to create, read, update,
and delete todo items. Each item should have a title and a description.
Use Hibernate to persist the items in the database.
Entity User (id, name) and Todo (id, name, description, user_id).
Also write dependancys  (pom.xml maven).

Here is the structure for a RESTful API to manage a todo list application:

pom.xml Dependencies
Make sure to include these dependencies in your pom.xml:
<dependencies>
    <!-- Spring Boot Starter for Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- Spring Boot Starter for JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <!-- MySQL Connector -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>
    <!-- Spring Boot Starter for Testing -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>
Entity Classes
User.java
package com.example.todo.entity;

import jakarta.persistence.*;
import java.util.List;

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Todo> todos;

    // Getters and Setters
}
Todo.java
package com.example.todo.entity;

import jakarta.persistence.*;

@Entity
public class Todo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String description;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    // Getters and Setters
}
Repository Interfaces
UserRepository.java
package com.example.todo.repository;

import com.example.todo.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
}
TodoRepository.java
package com.example.todo.repository;

import com.example.todo.entity.Todo;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TodoRepository extends JpaRepository<Todo, Long> {
}
REST Controllers
TodoController.java
package com.example.todo.controller;

import com.example.todo.entity.Todo;
import com.example.todo.repository.TodoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/todos")
public class TodoController {

    @Autowired
    private TodoRepository todoRepository;

    @GetMapping
    public List<Todo> getAllTodos() {
        return todoRepository.findAll();
    }

    @PostMapping
    public Todo createTodo(@RequestBody Todo todo) {
        return todoRepository.save(todo);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Todo> updateTodo(@PathVariable Long id, @RequestBody Todo todoDetails) {
        return todoRepository.findById(id)
            .map(todo -> {
                todo.setName(todoDetails.getName());
                todo.setDescription(todoDetails.getDescription());
                return ResponseEntity.ok(todoRepository.save(todo));
            }).orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTodo(@PathVariable Long id) {
        return todoRepository.findById(id)
            .map(todo -> {
                todoRepository.delete(todo);
                return ResponseEntity.ok().build();
            }).orElse(ResponseEntity.notFound().build());
    }
}

write hibernate.cfg.xml
In a Spring Boot application, Hibernate configuration is typically handled via application.properties or application.yml instead of using hibernate.cfg.xml. However, if you want to use hibernate.cfg.xml explicitly, here is an example:

hibernate.cfg.xml
Save this file in the src/main/resources directory:
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <!-- Database connection settings -->
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/todo_app</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">your_password</property>

        <!-- Hibernate properties -->
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.format_sql">true</property>
        <property name="hibernate.hbm2ddl.auto">update</property>

        <!-- Entity mappings -->
        <mapping class="com.example.todo.entity.User" />
        <mapping class="com.example.todo.entity.Todo" />
    </session-factory>
</hibernate-configuration>

Configuring Hibernate to Use hibernate.cfg.xml in Spring Boot
To make Hibernate use this configuration file in a Spring Boot application:

Remove any conflicting Hibernate configurations from application.properties or application.yml.
Annotate your main configuration class with @Configuration and define a SessionFactory bean:
java
package com.example.todo.config;

import org.hibernate.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class HibernateConfig {

    @Bean
    public SessionFactory sessionFactory() {
        return new org.hibernate.cfg.Configuration().configure().buildSessionFactory();
    }
}

write dto for user and todo. Then update controllers
The DTOs for User and Todo have been added, and the controllers have been updated to utilize these DTOs.
Let me know if you need further assistance or additional modifications!

I decide to change entity to model folder and com.example.demo for all project
The package names and folder structure have been updated to use com.example.demo and the model folder for your entities.
Let me know if you need further changes or adjustments!

write description project and instructions on how to run it.
// Main Application Class
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class TodoApplication {
    public static void main(String[] args) {
        SpringApplication.run(TodoApplication.class, args);
    }
}

/**
 * Project Description:
 * This is a simple RESTful API for managing a Todo List application.
 * It is built with Spring Boot, Hibernate, and MySQL, and allows users to create, read, update, and delete both Users and Todos.
 *
 * Features:
 * - User Management: Create and list users.
 * - Todo Management: Create, update, delete, and list todos associated with users.
 * - Data Persistence: Uses Hibernate to persist data in a MySQL database.
 * - REST Endpoints: Offers endpoints for managing users and todos.
 *
 * Instructions to Run:
 * 1. Clone the repository to your local machine.
 * 2. Ensure you have Java (17 or above), Maven, and MySQL installed.
 * 3. Update the `application.properties` file in `src/main/resources` with your MySQL database credentials.
 *
 *    Example:
 *    spring.datasource.url=jdbc:mysql://localhost:3306/todo_db
 *    spring.datasource.username=<your_username>
 *    spring.datasource.password=<your_password>
 *
 * 4. Build the project using Maven:
 *    ```
 *    mvn clean install
 *    ```
 * 5. Run the application:
 *    ```
 *    mvn spring-boot:run
 *    ```
 * 6. Use a tool like Postman or cURL to interact with the API at `http://localhost:8080`.
 *    - User Endpoints:
 *      - `GET /api/users` - Retrieve all users.
 *      - `POST /api/users` - Create a new user.
 *    - Todo Endpoints:
 *      - `GET /api/todos` - Retrieve all todos.
 *      - `POST /api/todos` - Create a new todo.
 *      - `PUT /api/todos/{id}` - Update a todo by ID.
 *      - `DELETE /api/todos/{id}` - Delete a todo by ID.
 */

// DTO Classes
package com.example.demo.dto;

public class UserDto {
    private Long id;
    private String name;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

package com.example.demo.dto;

public class TodoDto {
    private Long id;
    private String name;
    private String description;
    private Long userId;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }
}

// Updated Controllers
package com.example.demo.controller;

import com.example.demo.dto.TodoDto;
import com.example.demo.dto.UserDto;
import com.example.demo.model.Todo;
import com.example.demo.model.User;
import com.example.demo.repository.TodoRepository;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @GetMapping
    public List<UserDto> getAllUsers() {
        return userRepository.findAll().stream().map(user -> {
            UserDto userDto = new UserDto();
            userDto.setId(user.getId());
            userDto.setName(user.getName());
            return userDto;
        }).collect(Collectors.toList());
    }

    @PostMapping
    public UserDto createUser(@RequestBody UserDto userDto) {
        User user = new User();
        user.setName(userDto.getName());
        user = userRepository.save(user);
        userDto.setId(user.getId());
        return userDto;
    }
}

@RestController
@RequestMapping("/api/todos")
public class TodoController {

    @Autowired
    private TodoRepository todoRepository;

    @GetMapping
    public List<TodoDto> getAllTodos() {
        return todoRepository.findAll().stream().map(todo -> {
            TodoDto todoDto = new TodoDto();
            todoDto.setId(todo.getId());
            todoDto.setName(todo.getName());
            todoDto.setDescription(todo.getDescription());
            todoDto.setUserId(todo.getUser().getId());
            return todoDto;
        }).collect(Collectors.toList());
    }

    @PostMapping
    public TodoDto createTodo(@RequestBody TodoDto todoDto) {
        Todo todo = new Todo();
        todo.setName(todoDto.getName());
        todo.setDescription(todoDto.getDescription());
        User user = new User();
        user.setId(todoDto.getUserId()); // Assuming user ID is provided in the request
        todo.setUser(user);
        todo = todoRepository.save(todo);

        todoDto.setId(todo.getId());
        return todoDto;
    }

    @PutMapping("/{id}")
    public ResponseEntity<TodoDto> updateTodo(@PathVariable Long id, @RequestBody TodoDto todoDto) {
        return todoRepository.findById(id)
            .map(todo -> {
                todo.setName(todoDto.getName());
                todo.setDescription(todoDto.getDescription());
                todoRepository.save(todo);
                todoDto.setId(todo.getId());
                todoDto.setUserId(todo.getUser().getId());
                return ResponseEntity.ok(todoDto);
            }).orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTodo(@PathVariable Long id) {
        return todoRepository.findById(id)
            .map(todo -> {
                todoRepository.delete(todo);
                return ResponseEntity.ok().build();
            }).orElse(ResponseEntity.notFound().build());
    }
}

write unit tests for class
"""
package com.example.demo.controller;

import com.example.demo.dto.TodoDto;
import com.example.demo.dto.UserDto;
import com.example.demo.model.Todo;
import com.example.demo.model.User;
import com.example.demo.repository.TodoRepository;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @GetMapping
    public List<UserDto> getAllUsers() {
        return userRepository.findAll().stream().map(user -> {
            UserDto userDto = new UserDto();
            userDto.setId(user.getId());
            userDto.setName(user.getName());
            return userDto;
        }).collect(Collectors.toList());
    }

    @PostMapping
    public UserDto createUser(@RequestBody UserDto userDto) {
        User user = new User();
        user.setName(userDto.getName());
        user = userRepository.save(user);
        userDto.setId(user.getId());
        return userDto;
    }
}

"""
package com.example.demo.controller;

import com.example.demo.dto.UserDto;
import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UserControllerTest {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserController userController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllUsers() {
        // Arrange
        User user1 = new User();
        user1.setId(1L);
        user1.setName("Alice");

        User user2 = new User();
        user2.setId(2L);
        user2.setName("Bob");

        when(userRepository.findAll()).thenReturn(Arrays.asList(user1, user2));

        // Act
        List<UserDto> users = userController.getAllUsers();

        // Assert
        assertNotNull(users);
        assertEquals(2, users.size());
        assertEquals("Alice", users.get(0).getName());
        assertEquals("Bob", users.get(1).getName());
        verify(userRepository, times(1)).findAll();
    }

    @Test
    void testCreateUser() {
        // Arrange
        UserDto userDto = new UserDto();
        userDto.setName("Charlie");

        User user = new User();
        user.setId(1L);
        user.setName("Charlie");

        when(userRepository.save(any(User.class))).thenReturn(user);

        // Act
        UserDto createdUser = userController.createUser(userDto);

        // Assert
        assertNotNull(createdUser);
        assertEquals(1L, createdUser.getId());
        assertEquals("Charlie", createdUser.getName());
        verify(userRepository, times(1)).save(any(User.class));
    }
}
This UserControllerTest class includes unit tests for the getAllUsers and createUser methods in UserController.
 It uses Mockito to mock the UserRepository dependency and verifies the interactions and results.
 Let me know if you need further modifications or additional tests!